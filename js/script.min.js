"use strict";window.addEventListener("load",(function(){loadGame()}));const canvas=document.getElementById("canvas1"),ctx=canvas.getContext("2d");canvas.width=window.innerWidth,canvas.height=window.innerHeight;let moon=new Image;moon.src="assets/images/moon.jpg";let saturn=new Image;saturn.src="assets/images/saturn.png";let black_missile=new Image;black_missile.src="assets/images/black-missile.png";let deathStar=new Image;deathStar.src="assets/images/deathStar2.png";let white_missile=new Image;white_missile.src="assets/images/white-missile.png";const MISSILE_SCALE=6;let mushroomCloud=new Image;mushroomCloud.src="assets/images/mushroomCloud.png";let holeInGround=new Image;holeInGround.src="assets/images/holeInground.png";const MISS=1,HIT=2,OUT_OF_BOUNDS=3,NO_HIT=4,DESTROYED=5,AWAITING_FIRE=6,MINIMUM_BASE_DISTANCE=80;let maxStars=200,stars=[],hitPhrases=[],time=0,timerInterval=.1,gameFrame=0;const staggerFrames=155;let windVelocity=100,baseWidth=20,baseHeight=10,missileStatus=1;const ACTIVE=1,INACTIVE=0,ANIMATION_LENGTH=1e3;class HitPhrases{hitPhrases=new Array;constructor(){this.hitPhrases.push("NICE SHOT BOB. WAY TO GO <player>."),this.hitPhrases.push("NICE FIRING <player>."),this.hitPhrases.push("WOW! THIS GUYS A HOT SHOT!"),this.hitPhrases.push("BETTER GET YOUR ACT TOGETHER <opponent>."),this.hitPhrases.push("CRACK SHOT, ACE!"),this.hitPhrases.push("NICE SHOT! GO TEAM <player>."),this.hitPhrases.push("ALRIGHT!!!!!!"),this.hitPhrases.push("DO YOU NEED GLASSES <opponent>?"),this.hitPhrases.push("TOP GUN HEY!"),this.hitPhrases.push("WISE GUY, HUH!"),this.hitPhrases.push("WHERE'D YOU LEARN TO SHOOT <opponent>?")}getPhrase(player,opponent){let rand=Math.floor(Math.random()*this.hitPhrases.length),phrase=this.hitPhrases[rand];return phrase=""==player?phrase.replace("<player>","JOE"):phrase.replace("<player>",player),phrase=""==opponent?phrase.replace("<opponent>","JOE"):phrase.replace("<opponent>",opponent),phrase}}class ShootingStar{constructor(){this.x=Math.random()*canvas.width,this.y=0,this.speed=4*Math.random()-2}update(){this.x<0||this.y>canvas.height+100?(this.x=Math.random()*canvas.width,this.y=-10,this.speed=4*Math.random()-2):(this.x+=this.speed,this.y+=1)}draw(){ctx.fillStyle="yellow",ctx.fillRect(this.x,this.y,2,2)}}class NukedEmBaseType{fillColor;points;missileBase;constructor(fillColor,points,missileBase){this.fillColor=fillColor,this.points=points,this.missileBase=missileBase}}class NukedEmBase{X;Y;X2;Y2;fillColor;points;player;missileBase;baseNo;baseStatus;constructor(x,y,x2,y2,fillColor,points,player,missileBase,baseNo){this.X=x,this.Y=y,this.X2=x2,this.Y2=y2,this.fillColor=fillColor,this.points=points,this.player=player,this.missileBase=missileBase,this.baseNo=baseNo}}class Landscape{base1Y;base2Y;base1X;base2X;mountainX;mountainWidth;nukedEmBaseTypes=[];nukedEmBases=[];constructor(){this.createBaseTypes(),this.createDemoLandscape()}createBaseTypes(){let baseType=new NukedEmBaseType;baseType.fillColor="red",baseType.points=100,baseType.missileBase=!0,this.nukedEmBaseTypes.push(baseType),baseType=new NukedEmBaseType,baseType.fillColor="yellow",baseType.points=70,baseType.missileBase=!1,this.nukedEmBaseTypes.push(baseType),baseType=new NukedEmBaseType,baseType.fillColor="blue",baseType.points=40,baseType.missileBase=!1,this.nukedEmBaseTypes.push(baseType)}createLandscape(){this.base1Y=getRandomInt(canvas.height-300,canvas.height-100),this.base2Y=getRandomInt(canvas.height-300,canvas.height-100),this.mountainX=canvas.width/2;const h=this.base1Y<this.base2Y?this.base1Y:this.base2Y;this.mountainY=getRandomInt(200,h),this.mountainWidth=getRandomInt(200,400)}createDemoLandscape(){this.base1Y=540,this.base2Y=540,this.mountainX=canvas.width/2;const h=this.base1Y<this.base2Y?this.base1Y:this.base2Y;this.mountainY=300,this.mountainWidth=250,this.createDemoBases()}createBases(){this.nukedEmBaseTypes.forEach(baseType=>{let x=0,cntr=0,max=Math.floor(this.mountainX-this.mountainWidth/2-30);do{if(x=getRandomInt(0,max),cntr+=1,cntr>20)break}while(!1===this.checkMinimumDistanceBetweenBases(x,1));this.createBase(x,this.base1Y,0,0,1,baseType),cntr=0;do{if(x=getRandomInt(this.mountainX+this.mountainWidth/2+30,canvas.width),cntr+=1,cntr>20)break}while(!1===this.checkMinimumDistanceBetweenBases(x,2));this.createBase(x,this.base2Y,0,0,2,baseType)})}createBase(x,y,x2,y2,player,baseType){let nukedEmBase=new NukedEmBase(x,y,x2,y2,baseType.fillColor,baseType.points,player,baseType.missileBase);this.nukedEmBases.push(nukedEmBase)}createDemoBases(){this.createBase(100,this.base1Y,120,this.base1Y-10,1,this.nukedEmBaseTypes[0]),this.createBase(250,this.base1Y,270,this.base1Y-10,1,this.nukedEmBaseTypes[1]),this.createBase(350,this.base1Y,370,this.base1Y-10,1,this.nukedEmBaseTypes[2]),this.createBase(canvas.width-100,this.base2Y,canvas.width-80,this.base2Y-10,2,this.nukedEmBaseTypes[0]),this.createBase(canvas.width-250,this.base2Y,canvas.width-230,this.base2Y-10,2,this.nukedEmBaseTypes[1]),this.createBase(canvas.width-350,this.base2Y,canvas.width-330,this.base2Y-10,2,this.nukedEmBaseTypes[2])}getMissileBaseX(player){const base=this.nukedEmBases.filter(f=>f.player==player&&!0===f.missileBase);return base[0].X}determineBaseHit(){return this.nukedEmBases.filter(f=>2==f.baseStatus)[0]}areAllBasesDestroyed(){let player1bases=this.nukedEmBases.filter(f=>1==f.player&&5==f.baseStatus),player2bases=this.nukedEmBases.filter(f=>2==f.player&&5==f.baseStatus);return console.info("count:",player1bases.length,player2bases.length),player1bases.length==this.nukedEmBaseTypes.length||player2bases.length==this.nukedEmBaseTypes.length}checkMinimumDistanceBetweenBases(x,player){return this.nukedEmBases.forEach(base=>{let diff=x-base.X,result=Math.abs(diff)>80;return result}),!1}draw(){let grd=ctx.createLinearGradient(0,this.mountainY,0,canvas.height);grd.addColorStop(0,"brown"),grd.addColorStop(.7,"orange"),grd.addColorStop(1,"brown"),ctx.fillStyle=grd,ctx.beginPath(),ctx.moveTo(0,this.base1Y),ctx.lineTo(this.mountainX-this.mountainWidth/2,this.base1Y),ctx.lineTo(this.mountainX,this.mountainY),ctx.lineTo(this.mountainX+this.mountainWidth/2,this.base2Y),ctx.lineTo(canvas.width,this.base2Y),ctx.lineTo(canvas.width,canvas.height),ctx.lineTo(0,canvas.height),ctx.fill(),this.drawBases(),this.drawPlayerNames()}drawBases(){this.nukedEmBases.forEach(base=>{5==base.baseStatus?ctx.drawImage(holeInGround,base.X+baseWidth/2,base.Y,50,20):(ctx.beginPath(),ctx.fillStyle=base.fillColor,ctx.arc(base.X+baseWidth/2,base.Y,baseWidth/2,1*Math.PI,0*Math.PI),ctx.fill())})}getScoreForPlayer(player){let opponentsBase=1==player?2:1,hits,score;return this.nukedEmBases.filter(f=>f.player==opponentsBase&&5==f.baseStatus).map(hit=>hit.points).reduce((partialsum,a)=>partialsum+a,0)}updateScore(){const player1Score=this.getScoreForPlayer(1),player2Score=this.getScoreForPlayer(2);let text="Score "+player1Score+":"+player2Score;const width=ctx.measureText(text).width;ctx.fillStyle="black",ctx.font="36px Arial",ctx.fillText(text,canvas.width/2-width/2,canvas.height-40),ctx.fillStyle="white",ctx.fillText(text,canvas.width/2-width/2-2,canvas.height-42)}drawExplosion(){const sound=document.getElementById("explosion-sound");console.info("playing sound...");const base=this.nukedEmBases.filter(f=>2==f.baseStatus)[0];ctx.beginPath(),ctx.fillStyle="black",ctx.arc(base.X+baseWidth/2,base.Y,baseWidth/2,1*Math.PI,0*Math.PI),ctx.fill(),ctx.drawImage(mushroomCloud,base.X-mushroomCloud.width/2,base.Y-78,57,78),ctx.drawImage(holeInGround,base.X-holeInGround.width/2,base.Y,50,20),base.baseStatus=5}drawBaseMissiles(player1Missiles,player2Missiles){let y=canvas.height-70,x=5;for(let i=1;i<=player1Missiles;i++)ctx.drawImage(white_missile,x+15*i,y,white_missile.width/3,white_missile.height/3);x=canvas.width-30;for(let i=1;i<=player2Missiles;i++)ctx.drawImage(white_missile,x-15*i,y,white_missile.width/3,white_missile.height/3)}drawPlayerNames(){ctx.fillStyle="black",ctx.font="36px Arial",ctx.fillText(nukedEm.player1.playerName,30,canvas.height-80),ctx.fillStyle="white",ctx.fillText(nukedEm.player1.playerName,28,canvas.height-82);const text=nukedEm.player2.playerName,width=ctx.measureText(text).width;ctx.fillStyle="black",ctx.font="36px Arial",ctx.fillText(text,canvas.width-width-40,canvas.height-80),ctx.fillStyle="white",ctx.fillText(text,canvas.width-width-42,canvas.height-82)}drawMissMarkers(player1,player2){ctx.fillStyle="white",player1.missiles.forEach(missile=>{ctx.fillRect(missile.missX,missile.missY-2,2,4)}),player2.missiles.forEach(missile=>{ctx.fillRect(missile.missX,missile.missY-2,2,4)})}}class Background{loadStars(){for(let i=0;i<maxStars;i++)stars.push({x:Math.random()*canvas.width,y:Math.random()*canvas.height,width:3*Math.random(),height:3*Math.random()})}draw(landscape){ctx.clearRect(0,0,canvas.width,canvas.height),ctx.fillStyle="black",ctx.fillRect(0,0,canvas.width,canvas.height),ctx.fillStyle="white";for(let i=0;i<maxStars;i++)ctx.fillRect(stars[i].x,stars[i].y,stars[i].width,stars[i].height);ctx.drawImage(deathStar,canvas.width-150,15,121,107),ctx.drawImage(saturn,100,45,42,25),ctx.drawImage(moon,220,45,38,32),landscape.draw()}hitAnimation(setUpScreen,player,opponent){let r,g,b,phrases,text=(new HitPhrases).getPhrase(player,opponent);const interval=setInterval((function(){r=255*Math.random(),g=255*Math.random(),b=255*Math.random(),ctx.fillStyle=`rgba(${r},${g},${b}, 0.2)`,ctx.fillRect(0,0,canvas.width,canvas.height),ctx.fillStyle="white",ctx.font="40px Arial",ctx.fillText(text,canvas.width/2-ctx.measureText(text).width/2,canvas.height/2)}),300);setTimeout((function(){clearInterval(interval),setUpScreen()}),1e3)}doGameOver(landscape){let text="";const player1Score=landscape.getScoreForPlayer(1),player2Score=landscape.getScoreForPlayer(2);if(player1Score==player2Score)text="GAME OVER, DRAW!!!";else{const winner=player1Score>player2Score?nukedEm.player1.playerName:nukedEm.player2.playerName;text="GAME OVER, WELL DONE "+winner+"!!!"}const textWidth=ctx.measureText(text).width;ctx.fillStyle="white",ctx.font="40px Arial",ctx.fillText(text,canvas.width/2-textWidth/2,canvas.height/2)}}class Missile{missileX=0;missileY=0;power=0;angle=0;startX=0;startY=0;hitX=0;hitY=0;playerTurn=1;missileId=0;constructor(player,x,y,power,angle,id){time=0,missileStatus=1,this.playerTurn=player,this.startX=1==player?x+baseWidth:x-baseWidth,this.startY=y-black_missile.height/4,this.power=power,this.angle=angle,this.rotation=0,this.missileId=id}update(){let rad=this.angle*(Math.PI/180),vx=this.power*Math.cos(rad),vy=this.power*Math.sin(rad),vxWindVelocity=0,vyWindVelocity=0,x=vx*time;1==this.playerTurn?this.missileX=Math.floor(this.startX+x-0):this.missileX=Math.floor(this.startX-x-0);let y=vy*time+-4.9*Math.pow(time,2);this.missileY=Math.floor(this.startY-y-0),this.calcRotation(vx,rad)}calcRotation(vx,rad){let multiplier=0;multiplier=1==this.playerTurn?1:-1;let vy=this.power*Math.sin(rad)+-9.8*time,deg=0;vy<0?(deg=Math.atan(vx*multiplier/(-1*vy))*(180/Math.PI),this.rotation=90-deg+90):(deg=Math.atan(vx*multiplier/vy)*(180/Math.PI),this.rotation=deg)}detectCollision(landscape){if(2==this.playerTurn&&this.missileX<0)return 3;if(1==this.playerTurn&&this.missileX>canvas.width)return 3;let base;for(let i=0;i<landscape.nukedEmBases.length;i++)if(base=landscape.nukedEmBases[i],0==(this.missileY+white_missile.height/6<base.Y||this.missileY>base.Y+baseHeight||this.missileX+white_missile.width/6<base.X||this.missileX>base.X+white_missile.width/6))return base.baseStatus=2,console.info("HIT"),2;switch(this.playerTurn){case 1:if(this.missileX>landscape.mountainX&&this.missileY>landscape.base2Y-white_missile.height/6)return this.missX=this.missileX+white_missile.width/6,this.missY=landscape.base2Y,1;break;case 2:if(this.missileX<landscape.mountainX&&this.missileY>landscape.base1Y-white_missile.height/6)return this.missX=this.missileX-white_missile.width/6,this.missY=landscape.base1Y,1}return 4}convertMissilePosition(xycoord,value){if(xycoord="X")return 0}drawPath(){drawRotatedImage(white_missile,this.missileX,this.missileY,white_missile.width/6,white_missile.height/6,this.rotation)}}function drawRotatedImage(image,x,y,w,h,degrees){ctx.save(),ctx.translate(x+w/2,y+h/2),ctx.rotate(degrees*Math.PI/180),ctx.translate(-x-w/2,-y-h/2),ctx.drawImage(image,x,y,w,h),ctx.strokeStyle="yellow",ctx.lineWidth=1,ctx.restore()}class Player{missiles=[];missileCount=10;constructor(playerName,number){this.playerNumber=number,this.playerName=playerName,this.score=0}calculateScore(points){this.score+=points}resetScore(score){this.score=score}reduceMissiles(num){return this.missileCount-=num,this.missileCount}}class NukedEmGame{missile;playersTurn=1;player1;player2;gameOver=!1;numMissiles=0;demoMode=!0;initializeGame(){this.shootingStar=new ShootingStar,this.getPlayers(),this.landscape=new Landscape,this.background=new Background,this.background.loadStars(),this.background.draw(this.landscape)}alternateTurn(){1==this.playersTurn?this.playersTurn=2:this.playersTurn=1}showPowerAnglePad(display){const controls=document.getElementById("controls-container");controls.style.display=display,1==this.playersTurn?controls.style.left="100px":controls.style.left=canvas.width-350+"px"}getPlayers(){this.player1=new Player("MAL",1),this.player2=new Player("WAZ",2)}demoMissiles(){0==this.numMissiles?this.fireMissile(90,65,0):1==this.numMissiles&&(this.playersTurn=1,this.fireMissile(93.9,50,1)),this.numMissiles++}fireMissile(power,angle,id){1==this.playersTurn?(this.player1.reduceMissiles(1),this.missile=new Missile(1,this.landscape.getMissileBaseX(1),this.landscape.base1Y-10,power,angle,id),this.player1.missiles.push(this.missile)):(this.player2.reduceMissiles(1),this.missile=new Missile(2,this.landscape.getMissileBaseX(2),this.landscape.base2Y-10,power,angle,id),this.player2.missiles.push(this.missile))}doHit(){const base=this.landscape.determineBaseHit(),playerName=1==base.player?this.player2.playerName:this.player1.playerName,opponentName=1==base.player?this.player1.playerName:this.player2.playerName;this.showPowerAnglePad("none"),this.landscape.drawExplosion(),this.background.hitAnimation(()=>{this.drawScreen(),this.isGameOver(),this.missileStatus=0,this.gameOver||this.showPowerAnglePad("block")},playerName,opponentName),this.landscape.drawBaseMissiles(this.player1.missiles,this.player2.missiles)}isGameOver(){0!=this.player1.missileCount||0!=this.player2.missileCount?this.landscape.areAllBasesDestroyed()&&(this.gameOver=!0):this.gameOver=!0}nextMissile(power,angle){console.info("nextMissile..."),this.showPowerAnglePad("none"),missileStatus=1,this.demoMode,1==this.playersTurn?this.player1.missileCount>0&&this.fireMissile(power,angle,0):this.player2.missileCount>0&&this.fireMissile(power,angle,0)}newGame(){console.info("NEW GAME..."),time=0,missileStatus=1,this.showPowerAnglePad("block")}drawScreen(){ctx.clearRect(0,0,canvas.width,canvas.height),ctx.fillStyle="black",ctx.fillRect(0,0,canvas.width,canvas.height),this.shootingStar.update(),this.shootingStar.draw(),this.background.draw(this.landscape),this.landscape.drawBaseMissiles(this.player1.missileCount,this.player2.missileCount),this.landscape.drawMissMarkers(this.player1,this.player2),this.landscape.updateScore(),this.gameOver&&this.background.doGameOver(this.landscape)}run(){if(1==missileStatus){let result;switch(this.drawScreen(),result=this.missile?this.missile.detectCollision(this.landscape):6,result){case 2:console.info("explosion"),this.doHit(),missileStatus=0,this.alternateTurn();break;case 1:console.info("Miss: ",this.missile.missileX,this.missile.missileY),missileStatus=0,this.alternateTurn(),this.showPowerAnglePad("block");break;case 3:console.info("OUT OF BOUNDS"),missileStatus=0,this.alternateTurn(),this.showPowerAnglePad("block");break;case 6:break;default:this.missile.update(),this.missile.drawPath()}}else 0==missileStatus&&this.drawScreen();time+=timerInterval}}let nukedEm;function loadGame(){nukedEm=new NukedEmGame,nukedEm.initializeGame(),nukedEm.newGame(),animate()}function animate(){nukedEm.run(),requestAnimationFrame(animate)}function getRandomInt(min,max){return min=Math.ceil(min),max=Math.floor(max),Math.floor(Math.random()*(max-min)+min)}function colorToHex(color){var hexadecimal=color.toString(16);return 1==hexadecimal.length?"0"+hexadecimal:hexadecimal}function convertRGBtoHex(red,green,blue){return"#"+colorToHex(red)+colorToHex(green)+colorToHex(blue)}
//# sourceMappingURL=script.min.js.map